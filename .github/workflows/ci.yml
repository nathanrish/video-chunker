name: CI

on:
  push:
    branches: [ master, main ]
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build Docker image
        run: |
          docker build -t video-chunker:ci .

      - name: Run container and verify health (ports 5000-5003)
        run: |
          docker run -d --name vc-ci -p 5000:5000 -p 5001:5001 -p 5002:5002 -p 5003:5003 video-chunker:ci
          # wait for services to come up
          for i in {1..30}; do
            if curl -sSf http://localhost:5000/health >/dev/null && \
               curl -sSf http://localhost:5001/health >/dev/null && \
               curl -sSf http://localhost:5002/health >/dev/null && \
               curl -sSf http://localhost:5003/health >/dev/null; then
              echo "All services healthy"; break; fi; sleep 2; done
          # show orchestrator health payload for debugging
          curl -s http://localhost:5000/health || true
          docker logs --tail 100 vc-ci || true
          docker rm -f vc-ci || true

      - name: Print tool versions
        run: |
          python --version
          ffmpeg -version | head -n 1 || true

  # Optional example job leveraging secrets (does not run by default)
  summarize:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      HUGGINGFACE_TOKEN: ${{ secrets.HUGGINGFACE_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Dry-run transcriber (no media)
        run: |
          echo "OPENAI set: ${{ env.OPENAI_API_KEY != '' }}"
          echo "HF token set: ${{ env.HUGGINGFACE_TOKEN != '' }}"
          python -c "print('Transcriber ready')"
