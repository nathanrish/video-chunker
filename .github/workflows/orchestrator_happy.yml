name: Orchestrator Happy Path Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * *'  # Run daily at 2 AM

env:
  PYTHON_VERSION: '3.9'

jobs:
  orchestrator-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements_microservices.txt
        pip install pytest pytest-cov
    
    - name: Create test video
      run: |
        # Create a small test video for testing
        mkdir -p input
        # This would create a test video file
        echo "Creating test video file..."
        # For now, we'll create a dummy file
        touch input/test_meeting.mp4
    
    - name: Start services in background
      run: |
        python start_services.py &
        sleep 30  # Wait for services to start
        
        # Check if services are running
        curl -f http://localhost:5001/health || exit 1
        curl -f http://localhost:5002/health || exit 1
        curl -f http://localhost:5003/health || exit 1
        curl -f http://localhost:5004/health || exit 1
    
    - name: Run orchestrator happy path test
      run: |
        # Test the complete workflow
        python orchestrator.py "input/test_meeting.mp4" "Test Meeting" --date "2024-01-15" --language en
        
        # Verify output was created
        ls -la output/
        
        # Check if files were created
        if [ -d "output" ]; then
          echo "Output directory created successfully"
          find output -name "*.txt" -o -name "*.docx" -o -name "*.html" -o -name "*.zip" | head -10
        else
          echo "No output directory found"
          exit 1
        fi
    
    - name: Test file management features
      run: |
        # Test cleanup status endpoint
        curl -f http://localhost:5003/cleanup-status
        
        # Test API endpoints
        curl -f http://localhost:5004/api/stats
        
        # Test meeting creation via API
        curl -X POST http://localhost:5004/api/meetings \
          -H "Content-Type: application/json" \
          -d '{"title": "API Test Meeting", "date": "2024-01-15", "status": "pending"}'
    
    - name: Cleanup
      if: always()
      run: |
        # Stop services
        pkill -f "python.*start_services.py" || true
        pkill -f "python.*transcription_service.py" || true
        pkill -f "python.*meeting_minutes_service.py" || true
        pkill -f "python.*file_management_service.py" || true
        pkill -f "python.*api_service.py" || true
        
        # Clean up test files
        rm -rf input/test_meeting.mp4
        rm -rf output/